# -*- coding: utf-8 -*-
"""Netflix shock pred

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VtDMtJbzutrR4Am1b-s0CtFpRdViKl8-
"""

#install the dependancies
import numpy as np
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
plt.style.use('bmh')

#uploading a  data files
from google.colab import files
uploaded = files.upload()

#store the data into a data frame 
df = pd.read_csv('NSE-TATAGLOBAL11.csv')
df.head()

#get the number of trading days
df.shape

#visualize the close price data
 plt.figure(figsize=(16,8))
 plt.title('Netflix')
 plt.xlabel('Days')
 plt.ylabel('Ã§lose price USD ($)')
 plt.plot(df['Close'])
 plt.show()

#get the close price
df = df[['Close']]
df.head()

#create a variable to predict 'x' days out into the future
future_days = 25
#create a new coloum to (target) shifted 'x' units/days up
df['Prediction'] = df[['Close']].shift(-future_days)
df.head()

#create the feature data set (x) and convert it to a numpy array and remove the last 'x' rows/days
X = np.array(df.drop(['Prediction'], 1))[:-future_days]
print(X)

#create the traget data set (y) convert it to a numpy array and get all of the target values except the last 'x' rows
y = np.array(df['Prediction'])[:-future_days]
print(y)

#split the data into 75% training and 25% testing
x_train, x_test ,y_train , y_test = train_test_split(X ,y ,test_size = 0.25)

#create the models
#create the decision tree regressor model
tree = DecisionTreeRegressor().fit(x_train, y_train)
#create the linear regression model
lr = LinearRegression().fit(x_train , y_train)

#get the last 'x' rows of the feature data set
x_future = df.drop(['Prediction'], 1)[:-future_days]
x_future = x_future.tail(future_days)
x_future = np.array(x_future)
x_future

#show the model tree prediction
tree_prediction = tree.predict(x_future)
print(tree_prediction)
print()
#show the model linear regression prediction
lr_prediction = lr.predict(x_future)
print(lr_prediction)

#visualize the data
predictions = tree_prediction

valid =  df[X.shape[0]:]
valid['Prediction'] = predictions
plt.figure(figsize=(16,8))
plt.title('Modle')
plt.xlabel('Days')
plt.ylabel('close price USD ($)')
plt.plot(df['Close'])
plt.plot(valid[['Close', 'Prediction']])
plt.legend(['orig' , 'val' , 'pred'])
plt.show()

#visualize the data
predictions = lr_prediction

valid =  df[X.shape[0]:]
valid['Prediction'] = predictions
plt.figure(figsize=(16,8))
plt.title('Modle')
plt.xlabel('Days')
plt.ylabel('close price USD ($)')
plt.plot(df['Close'])
plt.plot(valid[['Close', 'Prediction']])
plt.legend(['orig' , 'val' , 'pred'])
plt.show()

